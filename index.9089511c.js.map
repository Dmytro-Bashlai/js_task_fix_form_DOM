{"mappings":"I,E,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCIA,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAFmB,SAAS,gBAAgB,CAAC,iB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAEtC,OAAO,CAAC,SAAC,CAAhB,EACE,IAAM,EAAsB,EAAM,IAAI,CACnC,OAAO,CAAC,kBAAmB,SAC3B,WAAW,EAEd,CAAA,EAAM,WAAW,CAAG,EAEpB,EAAM,kBAAkB,CACtB,WACC,iDAIG,MAAA,CAFK,EAAM,EAAE,CAAC,mBAEM,MAAA,CAApB,EAAoB,kBAG5B","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar inputs = _to_consumable_array(document.querySelectorAll(\".field-text\"));\ninputs.forEach(function(input) {\n    var normalizedInputName = input.name.replace(/([a-z])([A-Z])/g, \"$1 $2\").toUpperCase();\n    input.placeholder = normalizedInputName;\n    input.insertAdjacentHTML(\"afterend\", \"<label\\n      class='field-label'\\n      for=#\".concat(input.id, \"\\n    >\\n      \").concat(normalizedInputName, \"\\n    </label>\"));\n});\n\n//# sourceMappingURL=index.9089511c.js.map\n","'use strict';\n\nconst inputs = [...document.querySelectorAll('.field-text')];\n\ninputs.forEach((input) => {\n  const normalizedInputName = input.name\n    .replace(/([a-z])([A-Z])/g, '$1 $2')\n    .toUpperCase();\n\n  input.placeholder = normalizedInputName;\n\n  input.insertAdjacentHTML(\n    'afterend',\n    `<label\n      class='field-label'\n      for=#${input.id}\n    >\n      ${normalizedInputName}\n    </label>`,\n  );\n});\n"],"names":["arr","_array_like_to_array","len","length","i","arr2","Array","inputs","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","forEach","input","normalizedInputName","replace","toUpperCase","placeholder","insertAdjacentHTML","concat","id"],"version":3,"file":"index.9089511c.js.map"}